font = list(family = \"serif\", size = 15),
legend = list(orientation=\"h\", bgcolor = \"transparent\"),
plot_bgcolor = bgcolor,
paper_bgcolor = bgcolor)
print(p)"
)))
}
shiny::runApp('C:/ado/App5')
library(SurvMaps)
?SurvMapper
# load the included dummy data
load(system.file("extdata", "dummy_data.rds", package = "SurvMaps"))
# load the included EU/EEA SpatialPolygonsDataframe (includes Asia and Africa for background)
load(system.file("extdata", "EU_AFR_AS_plgs.rds", package = "SurvMaps"))
# Prepare the data for SurvMapper with PrepMap
mymap <- PrepMap(data = dummy_data , geo = plg_map)
# The map is correctly aligned only for selected width/height, so you can plot into a predefined device
dev.new(width=11.8,height=8, noRStudioGD = TRUE)
# Simple chloropleth map
SurvMapper(mymap, fills ="Dummy_status", Legend_titles = "Testing this", col_scale = "red")
# Chloropleth map with some additional options
SurvMapper(mymap, fills ="Dummy_status", Legend_titles = "Testing this",
fill_levels = c("Optimal",
"Good",
"Poor",
"Very poor",
"No data"),
col_scale = "red", reverse_colours = TRUE)
#' Simple bar chart with ECDC colours
#'
#' Somewhat pipe (dplyr) friendly bar chart. Allows a stacked bar chart with groupings.
#' @param data Your data frame
#' @param x vector in your dataframe, given without quotes
#' @param group vector in your dataframe, given without quotes
#' @author Tommi Karki
#' @keywords bar chart
#' @seealso ggplot2
#' @export
#' @examples
#' Create dummy data
#' mydat <- data.frame(ID = c(seq(1,10,1)),
#' Gender = c(rep(c("F", "M"),5)),
#' AgeGroup = c(rep(c("0-18", "18-65", "65+"),3), "65+"),
#' Case = c(1,1,1,0,0,1,1,1,1,1),
#' DateOfOnset = as.Date(c("2017-06-11", "2017-06-11",
#'                        "2017-06-11", NA, NA, "2017-06-10",
#'                        "2017-06-14", "2017-06-14",
#'                        "2017-06-19", "2017-06-19")),
#' Month = c(sample(c(3:6),5, replace = TRUE), sample(c(1:12),5)),
#' Week = c(sample(c(10:12),5, replace = TRUE), sample(c(1:53),5)))
#'
#' bar(mydat, Gender)
#'
#' #Stacked bar by AgeGroup
#' bar(mydat, Gender, group = AgeGroup)
#'
ggbar <- function(data, x, group=NULL){
x <- deparse(substitute(x))
group <- deparse(substitute(group))
FIGBREAKS <- pretty(seq(0, max(table(data[[x]])),
by = max(table(data[[x]]))/5))
p1<-ggplot(data, aes_string(x, fill=group)) +
geom_bar() +
scale_y_continuous(expand = c(0,0),
breaks = FIGBREAKS,
limits = c(0, max(FIGBREAKS))) +
theme_classic() +
theme(axis.line.x = element_blank())
if(group=="NULL") {
p1 <- p1 + geom_bar(fill=c(rgb(101,179,46, maxColorValue = 255))) +
guides(fill=FALSE)
}else if(length(unique(group)) == 2){
p1 <- p1 + scale_fill_manual(values = c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255)))
}else if(length(unique(group)) == 3){
p1 <- p1 + scale_fill_manual(values = c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(192,210,54, maxColorValue = 255)))
}else if(length(unique(group)) == 4){
p1 <- p1 + scale_fill_manual(values = c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(192,210,54, maxColorValue = 255),
rgb(58,85,122, maxColorValue = 255)))
}else if(length(unique(group)) == 5){
p1 <- p1 + scale_fill_manual(values = c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(192,210,54, maxColorValue = 255),
rgb(58,85,122, maxColorValue = 255),
rgb(0,140,117, maxColorValue = 255)))
}else if(length(unique(group)) == 6){
p1 <- p1 + scale_fill_manual(values = c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(192,210,54, maxColorValue = 255),
rgb(58,85,122, maxColorValue = 255),
rgb(0,140,117, maxColorValue = 255),
rgb(98,64,141, maxColorValue = 255)))
}else{
p1 <- p1 + scale_fill_manual(values = c(rgb(101,179,46, maxColorValue = 255),
rgb(124,189,196, maxColorValue = 255),
rgb(192,210,54, maxColorValue = 255),
rgb(58,85,122, maxColorValue = 255),
rgb(0,140,117, maxColorValue = 255),
rgb(98,64,141, maxColorValue = 255),
rgb(232,104,63, maxColorValue = 255)))
}
return(p1)
}
mydat <- data.frame(ID = c(seq(1,10,1)),
Gender = c(rep(c("F", "M"),5)),
AgeGroup = c(rep(c("0-18", "18-65", "65+"),3), "65+"),
Case = c(1,1,1,0,0,1,1,1,1,1),
DateOfOnset = as.Date(c("2017-06-11", "2017-06-11",
"2017-06-11", NA, NA, "2017-06-10",
"2017-06-14", "2017-06-14",
"2017-06-19", "2017-06-19")),
Month = c(sample(c(3:6),5, replace = TRUE), sample(c(1:12),5)),
Week = c(sample(c(10:12),5, replace = TRUE), sample(c(1:53),5)))
ggbar(mydat, Gender)
ggbar(mydat, Case)
library(readr)
LEGITRAVEL <- read_csv("C:/RCourse/NOT DIFFICULT/1.LEGITRAVEL.csv")
View(LEGITRAVEL)
Vewi
View(mydata)
View(LEGITRAVEL)
library(EpiMethods)
library(tidyverse)
#read in your data and glimpse it
mydata <- read_csv("C:/RCourse/NOT DIFFICULT/1.LEGITRAVEL.csv")
glimpse(mydata)
# let's see a summary for couple of variables that I'm interested of
mydata %>% select(Gender, Age, ReportingCountry, DateOfOnset) %>% full_summary()
#Age looks to be a character so let's fix it, add a variable for "Case" always as "1", and look at the summary again
mydata <- mydata %>% mutate(Age = as.numeric(Age),
Case = 1)
mydata %>% select(Gender, Age, ReportingCountry, DateOfOnset, Case) %>% full_summary()
library(SurvColors)
ggplot(mydat, aes(Gender)) + geom_bar(fill=SurvColors("qualitative", n=2))
ggplot(mydat, aes(Gender)) + geom_bar(fill=SurvColors("red", n=2))
?CrossTable
??CrossTable
?ggbar
library(EpiMethods)
remove.packages("SurvMaps")
library(devtools)
install_git("TommiKarki/SurvMaps")
install_github("TommiKarki/SurvMaps")
install_github("TommiKarki/SurvMaps")
remove.packages("EpiMethods")
remove.packages("SurvMaps")
??SurvColors
library(devtools)
install("C:/ado/EpiMethods")
#' Simple bar chart with ECDC colours
#'
#' Somewhat pipe (dplyr) friendly bar chart. Allows a stacked bar chart with groupings.
#' @param data Your data frame
#' @param x vector in your dataframe, given without quotes
#' @param group vector in your dataframe, given without quotes
#' @param col_scale colour scale, defaults to "qualitative"
#' @param xtitle x axis title, defaults to x
#' @param ytitle y axis title, defaults to "count"
#' @param legend_title legend title, if applicable defaults to group
#' @author Tommi Karki
#' @keywords bar chart
#' @seealso ggplot2
#' @export
#' @examples
#' Create dummy data
#' mydat <- data.frame(ID = c(seq(1,10,1)),
#' Gender = c(rep(c("F", "M"),5)),
#' AgeGroup = c(rep(c("0-18", "18-65", "65+"),3), "65+"),
#' Case = c(1,1,1,0,0,1,1,1,1,1),
#' DateOfOnset = as.Date(c("2017-06-11", "2017-06-11",
#'                        "2017-06-11", NA, NA, "2017-06-10",
#'                        "2017-06-14", "2017-06-14",
#'                        "2017-06-19", "2017-06-19")),
#' Month = c(sample(c(3:6),5, replace = TRUE), sample(c(1:12),5)),
#' Week = c(sample(c(10:12),5, replace = TRUE), sample(c(1:53),5)))
#'
#' bar(mydat, Gender)
#'
#' #Stacked bar by AgeGroup
#' bar(mydat, Gender, group = AgeGroup)
#'
ggbar <- function(data, xvar, group=NULL, col_scale = c("qualitative", "green", "blue",  "red"),
xtitle=xvar, ytitle="count", legend_title = group){
xvar <- deparse(substitute(xvar))
group <- deparse(substitute(group))
col_scale <- match.arg(col_scale)
data[[xvar]] <- as.factor(data[[xvar]])
FIGBREAKS <- pretty(seq(0, max(table(data[[xvar]])),
by = max(table(data[[xvar]]))/5))
p1<-ggplot(data, aes_string(xvar, fill=group)) +
geom_bar() +
scale_y_continuous(expand = c(0,0),
breaks = FIGBREAKS,
limits = c(0, max(FIGBREAKS))) +
theme_classic() +
theme(axis.line.x = element_blank(),
legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.key.width = unit(0.8, "cm"),
legend.key.size = unit(0.4, "cm")) +
labs(x=xtitle, y=ytitle)
if(group=="NULL") {
p1 <- p1 + geom_bar(fill=SurvColors(col_scale)) +
guides(fill=FALSE)
}else if(length(unique(group)) == 2){
p1 <- p1 + scale_fill_manual(values = c(SurvColors(col_scale, n=2)))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 3){
p1 <- p1 + scale_fill_manual(values = c(SurvColors(col_scale, n=3)))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 4){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=4))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 5){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=5))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 6){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=6))+
guides(fill = guide_legend(title=legend_title))
}else{
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=7))+
guides(fill = guide_legend(title=legend_title))
}
return(p1)
}
library(EpiMethods)
library(tidyverse)
#read in your data and glimpse it
mydata <- read_csv("C:/RCourse/NOT DIFFICULT/1.LEGITRAVEL.csv")
glimpse(mydata)
#Age looks to be a character so let's fix it, add a variable for "Case" always as "1", and look at the summary again
mydata %>% select(Gender, Age, ReportingCountry, DateOfOnset) %>% full_summary()
Case = 1)
mydata <- mydata %>% mutate(Age = as.numeric(Age),
mydata %>% select(Gender, Age, ReportingCountry, DateOfOnset, Case) %>% full_summary()
# So, a bar chart of Gender
ggbar(data = mydata, xvar = Gender)
mydata <- mydata %>% mutate(Age = as.numeric(Age),
Case = 1)
mydata %>% select(Gender, Age, ReportingCountry, DateOfOnset, Case) %>% full_summary()
ggbar(data = mydata, xvar = Gender)
ggbar(mydata, xvar = Gender, group = Classification)
ggbar(mydata, xvar = Gender, group = Classification, col_scale = "green")
#' Simple bar chart with ECDC colours
#'
#' Somewhat pipe (dplyr) friendly bar chart. Allows a stacked bar chart with groupings.
#' @param data Your data frame
#' @param x vector in your dataframe, given without quotes
#' @param group vector in your dataframe, given without quotes
#' @param col_scale colour scale, defaults to "qualitative"
#' @param xtitle x axis title, defaults to x
#' @param ytitle y axis title, defaults to "count"
#' @param legend_title legend title, if applicable defaults to group
#' @author Tommi Karki
#' @keywords bar chart
#' @seealso ggplot2
#' @export
#' @examples
#' Create dummy data
#' mydat <- data.frame(ID = c(seq(1,10,1)),
#' Gender = c(rep(c("F", "M"),5)),
#' AgeGroup = c(rep(c("0-18", "18-65", "65+"),3), "65+"),
#' Case = c(1,1,1,0,0,1,1,1,1,1),
#' DateOfOnset = as.Date(c("2017-06-11", "2017-06-11",
#'                        "2017-06-11", NA, NA, "2017-06-10",
#'                        "2017-06-14", "2017-06-14",
#'                        "2017-06-19", "2017-06-19")),
#' Month = c(sample(c(3:6),5, replace = TRUE), sample(c(1:12),5)),
#' Week = c(sample(c(10:12),5, replace = TRUE), sample(c(1:53),5)))
#'
#' bar(mydat, Gender)
#'
#' #Stacked bar by AgeGroup
#' bar(mydat, Gender, group = AgeGroup)
#'
ggbar <- function(data, xvar, group=NULL, col_scale = c("qualitative", "green", "blue",  "red"),
xtitle=xvar, ytitle="count", legend_title = group){
xvar <- deparse(substitute(xvar))
group <- deparse(substitute(group))
col_scale <- match.arg(col_scale)
data[[xvar]] <- as.factor(data[[xvar]])
FIGBREAKS <- pretty(seq(0, max(table(data[[xvar]])),
by = max(table(data[[xvar]]))/5))
p1<-ggplot(data, aes_string(xvar, fill=group)) +
geom_bar() +
scale_y_continuous(expand = c(0,0),
breaks = FIGBREAKS,
limits = c(0, max(FIGBREAKS))) +
theme_classic() +
theme(axis.line.x = element_blank(),
legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.key.width = unit(0.8, "cm"),
legend.key.size = unit(0.4, "cm")) +
labs(x=xtitle, y=ytitle)
if(group=="NULL") {
p1 <- p1 + geom_bar(fill=SurvColors(col_scale)) +
guides(fill=FALSE)
}else if(length(unique(group)) == 2){
print(length(unique(group))
print(SurvColors(col_scale, n=2))
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=2)) +
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 3){
print(length(unique(group))
print(SurvColors(col_scale, n=3))
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=3)) +
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 4){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=4))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 5){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=5))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 6){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=6))+
guides(fill = guide_legend(title=legend_title))
}else{
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=7))+
guides(fill = guide_legend(title=legend_title))
}
return(p1)
}
#' Simple bar chart with ECDC colours
#'
#' Somewhat pipe (dplyr) friendly bar chart. Allows a stacked bar chart with groupings.
#' @param data Your data frame
#' @param x vector in your dataframe, given without quotes
#' @param group vector in your dataframe, given without quotes
#' @param col_scale colour scale, defaults to "qualitative"
#' @param xtitle x axis title, defaults to x
#' @param ytitle y axis title, defaults to "count"
#' @param legend_title legend title, if applicable defaults to group
#' @author Tommi Karki
#' @keywords bar chart
#' @seealso ggplot2
#' @export
#' @examples
#' Create dummy data
#' mydat <- data.frame(ID = c(seq(1,10,1)),
#' Gender = c(rep(c("F", "M"),5)),
#' AgeGroup = c(rep(c("0-18", "18-65", "65+"),3), "65+"),
#' Case = c(1,1,1,0,0,1,1,1,1,1),
#' DateOfOnset = as.Date(c("2017-06-11", "2017-06-11",
#'                        "2017-06-11", NA, NA, "2017-06-10",
#'                        "2017-06-14", "2017-06-14",
#'                        "2017-06-19", "2017-06-19")),
#' Month = c(sample(c(3:6),5, replace = TRUE), sample(c(1:12),5)),
#' Week = c(sample(c(10:12),5, replace = TRUE), sample(c(1:53),5)))
#'
#' bar(mydat, Gender)
#'
#' #Stacked bar by AgeGroup
#' bar(mydat, Gender, group = AgeGroup)
#'
ggbar <- function(data, xvar, group=NULL, col_scale = c("qualitative", "green", "blue",  "red"),
xtitle=xvar, ytitle="count", legend_title = group){
xvar <- deparse(substitute(xvar))
group <- deparse(substitute(group))
col_scale <- match.arg(col_scale)
data[[xvar]] <- as.factor(data[[xvar]])
FIGBREAKS <- pretty(seq(0, max(table(data[[xvar]])),
by = max(table(data[[xvar]]))/5))
p1<-ggplot(data, aes_string(xvar, fill=group)) +
geom_bar() +
scale_y_continuous(expand = c(0,0),
breaks = FIGBREAKS,
limits = c(0, max(FIGBREAKS))) +
theme_classic() +
theme(axis.line.x = element_blank(),
legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.key.width = unit(0.8, "cm"),
legend.key.size = unit(0.4, "cm")) +
labs(x=xtitle, y=ytitle)
if(group=="NULL") {
p1 <- p1 + geom_bar(fill=SurvColors(col_scale)) +
guides(fill=FALSE)
}else if(length(unique(group)) == 2){
print(length(unique(group)))
print(SurvColors(col_scale, n=2))
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=2)) +
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 3){
print(length(unique(group)))
print(SurvColors(col_scale, n=3))
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=3)) +
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 4){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=4))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 5){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=5))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(group)) == 6){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=6))+
guides(fill = guide_legend(title=legend_title))
}else{
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=7))+
guides(fill = guide_legend(title=legend_title))
}
return(p1)
}
ggbar(mydata, xvar = Gender, group = Classification, col_scale = "green")
#' Simple bar chart with ECDC colours
#'
#' Somewhat pipe (dplyr) friendly bar chart. Allows a stacked bar chart with groupings.
#' @param data Your data frame
#' @param x vector in your dataframe, given without quotes
#' @param group vector in your dataframe, given without quotes
#' @param col_scale colour scale, defaults to "qualitative"
#' @param xtitle x axis title, defaults to x
#' @param ytitle y axis title, defaults to "count"
#' @param legend_title legend title, if applicable defaults to group
#' @author Tommi Karki
#' @keywords bar chart
#' @seealso ggplot2
#' @export
#' @examples
#' Create dummy data
#' mydat <- data.frame(ID = c(seq(1,10,1)),
#' Gender = c(rep(c("F", "M"),5)),
#' AgeGroup = c(rep(c("0-18", "18-65", "65+"),3), "65+"),
#' Case = c(1,1,1,0,0,1,1,1,1,1),
#' DateOfOnset = as.Date(c("2017-06-11", "2017-06-11",
#'                        "2017-06-11", NA, NA, "2017-06-10",
#'                        "2017-06-14", "2017-06-14",
#'                        "2017-06-19", "2017-06-19")),
#' Month = c(sample(c(3:6),5, replace = TRUE), sample(c(1:12),5)),
#' Week = c(sample(c(10:12),5, replace = TRUE), sample(c(1:53),5)))
#'
#' bar(mydat, Gender)
#'
#' #Stacked bar by AgeGroup
#' bar(mydat, Gender, group = AgeGroup)
#'
ggbar <- function(data, xvar, group=NULL, col_scale = c("qualitative", "green", "blue",  "red"),
xtitle=xvar, ytitle="count", legend_title = group){
xvar <- deparse(substitute(xvar))
group <- deparse(substitute(group))
col_scale <- match.arg(col_scale)
data[[xvar]] <- as.factor(data[[xvar]])
FIGBREAKS <- pretty(seq(0, max(table(data[[xvar]])),
by = max(table(data[[xvar]]))/5))
p1<-ggplot(data, aes_string(xvar, fill=group)) +
geom_bar() +
scale_y_continuous(expand = c(0,0),
breaks = FIGBREAKS,
limits = c(0, max(FIGBREAKS))) +
theme_classic() +
theme(axis.line.x = element_blank(),
legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.key.width = unit(0.8, "cm"),
legend.key.size = unit(0.4, "cm")) +
labs(x=xtitle, y=ytitle)
if(group=="NULL") {
p1 <- p1 + geom_bar(fill=SurvColors(col_scale)) +
guides(fill=FALSE)
}else if(length(unique(data[[group]])) == 2){
print(length(unique(data[[group]])))
print(SurvColors(col_scale, n=2))
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=2)) +
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(data[[group]])) == 3){
print(length(unique(data[[group]])))
print(SurvColors(col_scale, n=3))
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=3)) +
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(data[[group]])) == 4){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=4))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(data[[group]])) == 5){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=5))+
guides(fill = guide_legend(title=legend_title))
}else if(length(unique(data[[group]])) == 6){
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=6))+
guides(fill = guide_legend(title=legend_title))
}else{
p1 <- p1 + scale_fill_manual(values = SurvColors(col_scale, n=7))+
guides(fill = guide_legend(title=legend_title))
}
return(p1)
}
ggbar(mydata, xvar = Gender, group = Classification, col_scale = "green")
ggbar(mydata, xvar = Gender, group = Gender, col_scale = "green")
ggbar(mydata, xvar = Gender, group = Gender, col_scale = "red")
ggbar(mydata, xvar = Gender, group = Gender, col_scale = "blue")
remove.packages("EpiMethods")
setwd("C:/ado/EpiMethods")
document()
install("C:/ado/EpiMethods")
rm(ggbar)
ggbar(data = mydata, xvar = Gender)
# And by Classification
ggbar(mydata, xvar = Gender, group = Classification)
ggbar(mydata, xvar = Gender, group = Gender)
ggbar(mydata, xvar = Gender, group = Gender, col_scale = "green")
remove.packages("EpiMethods")
setwd("C:/")
library(devtools)
setwd("C:/ado/")
create("EpiMethods")
setwd("./EpiMethods")
dir()
document()
remove.packages("EpiMethods")
document()
